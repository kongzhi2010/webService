<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
       	http://www.springframework.org/schema/mvc
       	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 设置注解注入的方式 -->
	<mvc:annotation-driven />
	<context:component-scan base-package='husd.wsi' />

	<!-- 加载配置文件 -->
	<bean id="propertyConfigure" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
			</list>
		</property>
	</bean>

	<!-- 定时任务配置 -->
	<import resource="classpath:task-schedule.xml" />

	<!-- 切面配置 -->
	<import resource="classpath:spring-aop.xml" />

	<!-- 数据源 -->
	<import resource="classpath:dataSource.xml" />

	<!-- myibatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--自动扫描实体类-->
		<property name="typeAliasesPackage" value="husd.wsi.pojo" />
		<!--<property name="mapperLocations" value="classpath*:husd/wsi/dao/*Mapper.xml" />-->
	</bean>

	<!--要扫描的Mapper接口，相同目录下有同名的xml文件-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="husd.wsi.dao" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 事务控制代码,事务会被spring接管 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 这样根目录下面的resource的文件(.css,.js等)就不会被spring的DispatchServlet进行过滤 要加上xmlns:mvc的验证 -->
	<mvc:resources mapping="/views/scripts/**" location="/WEB-INF/views/scripts/" />


	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
		<property name="defaultErrorView" value="error"></property>
		<!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
		<property name="exceptionAttribute" value="ex"></property>
		<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
		<!-- <property name="exceptionMappings">
			<props>
				<prop key="cn.basttg.core.exception.BusinessException">error-business</prop>
				这里还可以继续扩展对不同异常类型的处理
			</props>
		</property> -->
	</bean>


</beans>